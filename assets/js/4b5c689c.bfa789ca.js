"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1407],{7264:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>r,default:()=>u,frontMatter:()=>l,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"guides/styles/text-layout","title":"Text","description":"For text nodes, objectFit defaults to \'scale-down\', not \'fill\'.","source":"@site/docs/guides/styles/text-layout.md","sourceDirName":"guides/styles","slug":"/guides/styles/text-layout","permalink":"/docs/guides/styles/text-layout","draft":false,"unlisted":false,"editUrl":"https://github.com/pixijs/layout/tree/main/website/docs/docs/guides/styles/text-layout.md","tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"title":"Text","hide_title":true,"sidebar_position":8},"sidebar":"guides","previous":{"title":"Background","permalink":"/docs/guides/styles/background"},"next":{"title":"Debug","permalink":"/docs/guides/styles/debug"}}');var o=n(2540),i=n(3023);const l={title:"Text",hide_title:!0,sidebar_position:8},r="Text",d={},a=[];function c(e){const t={admonition:"admonition",br:"br",code:"code",h1:"h1",header:"header",mdxAdmonitionTitle:"mdxAdmonitionTitle",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"text",children:"Text"})}),"\n",(0,o.jsxs)(t.admonition,{type:"info",children:[(0,o.jsx)(t.mdxAdmonitionTitle,{children:(0,o.jsx)(t.strong,{children:"Important:"})}),(0,o.jsxs)(t.p,{children:["For text nodes, ",(0,o.jsx)(t.code,{children:"objectFit"})," defaults to ",(0,o.jsx)(t.code,{children:"'scale-down'"}),", not ",(0,o.jsx)(t.code,{children:"'fill'"}),".",(0,o.jsx)(t.br,{}),"\n","This preserves the natural font sizing unless the text would otherwise overflow the layout box."]})]}),"\n",(0,o.jsx)(t.p,{children:"Text in PixiJS Layout works slightly differently to all other leaf nodes in the library."}),"\n",(0,o.jsxs)(t.p,{children:["When using text nodes (",(0,o.jsx)(t.code,{children:"LayoutText"}),", ",(0,o.jsx)(t.code,{children:"LayoutBitmapText"}),", ",(0,o.jsx)(t.code,{children:"LayoutHTMLText"}),", ",(0,o.jsx)(t.code,{children:"Text"}),", ",(0,o.jsx)(t.code,{children:"BitmapText"}),", ",(0,o.jsx)(t.code,{children:"HTMLText"}),"), the text content can automatically ",(0,o.jsx)(t.strong,{children:"wrap"})," based on the layout box dimensions if ",(0,o.jsx)(t.code,{children:"wordWrap"})," is enabled."]}),"\n",(0,o.jsx)(t.p,{children:"This allows for responsive text that fits within the layout box without manual adjustments."}),"\n",(0,o.jsxs)(t.p,{children:["If ",(0,o.jsx)(t.code,{children:"wordWrap: true"})," is set on the text style the text automatically wraps onto multiple lines based on the layout box size.\nThis is similar to manually setting the ",(0,o.jsx)(t.code,{children:"wordWrapWidth"})," property on the text style, but it is automatically calculated based on the layout box size."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ts",children:"const label = new LayoutText({\n    text: 'This is a very long line that should wrap inside the box.',\n    style: {\n        fill: 0xffffff,\n        wordWrap: true,\n    },\n    layout: {\n        width: 250,\n        height: 250,\n    },\n});\n"})})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},3023:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>r});var s=n(3696);const o={},i=s.createContext(o);function l(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:l(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);