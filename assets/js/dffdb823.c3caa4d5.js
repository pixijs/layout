"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7828],{3023:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>l});var i=n(3696);const s={},a=i.createContext(s);function o(e){const t=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(a.Provider,{value:t},e.children)}},4883:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"guides/core/layout-system","title":"LayoutSystem API","description":"Layout System API","source":"@site/docs/guides/core/layout-system.md","sourceDirName":"guides/core","slug":"/guides/core/layout-system","permalink":"/docs/guides/core/layout-system","draft":false,"unlisted":false,"editUrl":"https://github.com/pixijs/layout/tree/main/website/docs/docs/guides/core/layout-system.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"title":"LayoutSystem API","hide_title":true,"sidebar_position":2},"sidebar":"guides","previous":{"title":"Layout API","permalink":"/docs/guides/core/layout"},"next":{"title":"Components","permalink":"/docs/guides/core/components"}}');var s=n(2540),a=n(3023);const o={title:"LayoutSystem API",hide_title:!0,sidebar_position:2},l=void 0,r={},d=[{value:"Layout System API",id:"layout-system-api",level:2},{value:"Initializing the LayoutSystem",id:"initializing-the-layoutsystem",level:2},{value:"LayoutSystemOptions",id:"layoutsystemoptions",level:3},{value:"Continuous Layout Updates",id:"continuous-layout-updates",level:2},{value:"Enabling Debug Renderer",id:"enabling-debug-renderer",level:2},{value:"Manually Triggering Layout Recalculations",id:"manually-triggering-layout-recalculations",level:2}];function c(e){const t={admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{id:"layout-system-api",children:"Layout System API"}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"LayoutSystem"})," integrates layout management into the PixiJS rendering lifecycle.\nIt ensures that layouts are continuously updated, recalculated when necessary, and optionally visualized with debug tools."]}),"\n",(0,s.jsx)(t.h2,{id:"initializing-the-layoutsystem",children:"Initializing the LayoutSystem"}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"LayoutSystem"})," must be installed into your PixiJS application to manage layouts automatically.\nDuring initialization, you can pass ",(0,s.jsx)(t.code,{children:"LayoutSystemOptions"})," to control its behavior."]}),"\n",(0,s.jsx)(t.p,{children:"Example setup:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:"import '@pixi/layout'; // required to ensure all systems and mixins are registered\nimport { Application } from 'pixi.js';\nimport { LayoutSystem } from '@pixi/layout';\n\nconst app = new Application();\n\nawait app.init({\n    background: '#1099bb',\n    resizeTo: window,\n    layout: {\n        autoUpdate: true,\n        enableDebug: false,\n        throttle: 100,\n    },\n});\n\n// can later be accessed via app.renderer.layout\nconst layoutSystem = app.renderer.layout;\n"})}),"\n",(0,s.jsx)(t.h3,{id:"layoutsystemoptions",children:"LayoutSystemOptions"}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"LayoutSystemOptions"})," interface looks like this:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:"interface LayoutSystemOptions {\n    autoUpdate?: boolean;\n    enableDebug?: boolean;\n    debugModificationCount?: number;\n    throttle?: number;\n}\n"})}),"\n",(0,s.jsx)(t.p,{children:"Each option:"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Option"}),(0,s.jsx)(t.th,{children:"Type"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"autoUpdate"}),(0,s.jsx)(t.td,{children:"boolean"}),(0,s.jsxs)(t.td,{children:["If ",(0,s.jsx)(t.code,{children:"true"}),", the layout system will automatically recalculate layouts on each frame. Set ",(0,s.jsx)(t.code,{children:"false"})," if you prefer manual updates"]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"enableDebug"}),(0,s.jsx)(t.td,{children:"boolean"}),(0,s.jsxs)(t.td,{children:["If ",(0,s.jsx)(t.code,{children:"true"}),", the debug renderer is activated at startup to visualize layout boxes. Note that you should only enable this on development builds."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"debugModificationCount"}),(0,s.jsx)(t.td,{children:"number"}),(0,s.jsxs)(t.td,{children:["The number of times a node must be modified before the debug renderer will show the layout boxes. This is useful for performance optimization. Default is ",(0,s.jsx)(t.code,{children:"0"}),", meaning it will show immediately."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"throttle"}),(0,s.jsx)(t.td,{children:"number"}),(0,s.jsxs)(t.td,{children:["The delay (in milliseconds) to batch layout size recalculations for better performance. Default is ",(0,s.jsx)(t.code,{children:"100ms"}),". This is useful for reducing the number of recalculations during rapid changes."]})]})]})]}),"\n",(0,s.jsx)(t.h2,{id:"continuous-layout-updates",children:"Continuous Layout Updates"}),"\n",(0,s.jsxs)(t.p,{children:["When ",(0,s.jsx)(t.code,{children:"autoUpdate"})," is enabled, the LayoutSystem hooks into the ",(0,s.jsx)(t.code,{children:"prerender"})," phase of the PixiJS lifecycle."]}),"\n",(0,s.jsx)(t.p,{children:"Each frame, the system:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Traverses the scene graph recursively."}),"\n",(0,s.jsx)(t.li,{children:"Finds nodes with an active layout."}),"\n",(0,s.jsx)(t.li,{children:"Checks if any node needs to update its layout."}),"\n",(0,s.jsx)(t.li,{children:"Applies recalculated transforms if needed."}),"\n",(0,s.jsx)(t.li,{children:"Optionally renders debug overlays."}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["Additionally, layout recalculations are throttled to avoid expensive recalculations every frame, especially for size changes involving intrinsic content (",(0,s.jsx)(t.code,{children:"width: 'intrinsic'"}),")."]}),"\n",(0,s.jsx)(t.h2,{id:"enabling-debug-renderer",children:"Enabling Debug Renderer"}),"\n",(0,s.jsx)(t.p,{children:"The LayoutSystem can optionally render layout regions for debugging.\nThe debug renderer draws margin, border, padding, flex, and content areas in different colors."}),"\n",(0,s.jsx)(t.p,{children:"To enable at runtime:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:"app.renderer.layout.enableDebug(true);\n"})}),"\n",(0,s.jsx)(t.p,{children:"To disable:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:"app.renderer.layout.enableDebug(false);\n"})}),"\n",(0,s.jsxs)(t.p,{children:["If ",(0,s.jsx)(t.code,{children:"enableDebug"})," was passed in ",(0,s.jsx)(t.code,{children:"LayoutSystemOptions"}),", the debug renderer will activate automatically."]}),"\n",(0,s.jsxs)(t.p,{children:["When active, the debug overlay is drawn into a special container (",(0,s.jsx)(t.code,{children:"DebugRenderer.holder"}),") attached to the stage."]}),"\n",(0,s.jsxs)(t.admonition,{type:"info",children:[(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"enableDebug"})," method is asynchronous and returns a promise. This is because we dynamically load the debug renderer module to keep the core bundle size small."]}),(0,s.jsxs)(t.p,{children:["You typically do not need to ",(0,s.jsx)(t.code,{children:"await"})," this method as the debug renderer will be enabled in the next frame.\nHowever, if you need to ensure the debug renderer is ready before performing other operations, you can ",(0,s.jsx)(t.code,{children:"await"})," it."]})]}),"\n",(0,s.jsx)(t.h2,{id:"manually-triggering-layout-recalculations",children:"Manually Triggering Layout Recalculations"}),"\n",(0,s.jsxs)(t.p,{children:["If you disabled ",(0,s.jsx)(t.code,{children:"autoUpdate"}),", or if you want to manually control when layouts are recalculated, you can call:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:"app.renderer.layout.update(app.stage); // or any other container if you want to update a specific part of the scene graph\n"})}),"\n",(0,s.jsx)(t.p,{children:"This will update only the given object and its children (if they have layouts)."})]})}function u(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}}}]);