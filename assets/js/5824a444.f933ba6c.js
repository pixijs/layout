"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3905],{1669:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>h,contentTitle:()=>o,default:()=>a,frontMatter:()=>r,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"guides/styles/sizing-and-dimensions","title":"Sizing and Dimensions","description":"Sizing and Dimensions","source":"@site/docs/guides/styles/sizing-and-dimensions.md","sourceDirName":"guides/styles","slug":"/guides/styles/sizing-and-dimensions","permalink":"/docs/guides/styles/sizing-and-dimensions","draft":false,"unlisted":false,"editUrl":"https://github.com/pixijs/layout/tree/main/website/docs/docs/guides/styles/sizing-and-dimensions.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"title":"Sizing and Dimensions","hide_title":true,"sidebar_position":1},"sidebar":"guides","previous":{"title":"Components","permalink":"/docs/guides/core/components"},"next":{"title":"Flexbox Styles","permalink":"/docs/guides/styles/flexbox-layout"}}');var t=n(2540),d=n(3023);const r={title:"Sizing and Dimensions",hide_title:!0,sidebar_position:1},o=void 0,h={},l=[{value:"Sizing and Dimensions",id:"sizing-and-dimensions",level:2},{value:"Intrinsic Sizing",id:"intrinsic-sizing",level:3},{value:"Width and Height",id:"width-and-height",level:2},{value:"Min/Max Constraints",id:"minmax-constraints",level:2},{value:"Aspect Ratio",id:"aspect-ratio",level:2}];function c(e){const i={admonition:"admonition",br:"br",code:"code",h2:"h2",h3:"h3",hr:"hr",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,d.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.h2,{id:"sizing-and-dimensions",children:"Sizing and Dimensions"}),"\n",(0,t.jsxs)(i.p,{children:["A fundamental aspect of layout is ",(0,t.jsx)(i.strong,{children:"sizing"}),". It determines how much space a node occupies in the layout and how it interacts with other nodes."]}),"\n",(0,t.jsx)(i.p,{children:"In PixiJS Layout, sizing is managed by the Yoga layout engine, which provides a powerful and flexible system for controlling dimensions."}),"\n",(0,t.jsx)(i.p,{children:"In general, all size-related properties accept the following types of values:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Pixel numbers"})," (e.g., ",(0,t.jsx)(i.code,{children:"width: 200"}),")"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Percentage strings"})," (e.g., ",(0,t.jsx)(i.code,{children:"width: '50%'"}),")"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Auto sizing"})," (e.g., ",(0,t.jsx)(i.code,{children:"width: 'auto'"}),")"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Intrinsic sizing"})," (e.g., ",(0,t.jsx)(i.code,{children:"width: 'intrinsic'"}),")","\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"This is a special value that uses the PixiJS bounds of the object to determine its size. See the section on intrinsic sizing below for more details."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(i.h3,{id:"intrinsic-sizing",children:"Intrinsic Sizing"}),"\n",(0,t.jsxs)(i.p,{children:["Before we dive into the details of sizing, it\u2019s important to understand the concept of ",(0,t.jsx)(i.strong,{children:"intrinsic sizing"}),".\nIntrinsic sizing allows a node to automatically adjust its size based on its content or children."]}),"\n",(0,t.jsxs)(i.p,{children:["In PixiJS Layout, intrinsic sizing is enabled by default for all ",(0,t.jsx)(i.strong,{children:"leaf nodes"}),". This means that if you set the ",(0,t.jsx)(i.code,{children:"layout"})," property to ",(0,t.jsx)(i.code,{children:"true"}),", the node will automatically size itself based on its content."]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"sprite.layout = true;\n// This is equivalent to:\nsprite.layout = {\n    width: 'intrinsic',\n    height: 'intrinsic',\n};\n"})}),"\n",(0,t.jsxs)(i.p,{children:["Intrinsic sizing does have a ",(0,t.jsx)(i.strong,{children:"performance impact"})," as we check the bounds of the node periodically, based on the ",(0,t.jsx)(i.code,{children:"throttle"})," value passed into the ",(0,t.jsx)(i.code,{children:"LayoutSystem"})," . This is not a problem for most use cases, but if you are using a lot of nodes, you may want to consider using fixed sizes instead."]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"sprite.layout = {\n    width: texture.width,\n    height: texture.height,\n};\n"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h2,{id:"width-and-height",children:"Width and Height"}),"\n",(0,t.jsxs)(i.p,{children:["The ",(0,t.jsx)(i.code,{children:"width"})," and ",(0,t.jsx)(i.code,{children:"height"})," properties define the size of the node's ",(0,t.jsx)(i.strong,{children:"border box"})," \u2014 meaning the total area including content, padding, and border."]}),"\n",(0,t.jsxs)(i.table,{children:[(0,t.jsx)(i.thead,{children:(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.th,{children:"Property"}),(0,t.jsx)(i.th,{children:"Description"})]})}),(0,t.jsxs)(i.tbody,{children:[(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"width"})}),(0,t.jsx)(i.td,{children:"Width of the node's border box."})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"height"})}),(0,t.jsx)(i.td,{children:"Height of the node's border box."})]})]})]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-tsx",children:"container.layout = {\n    width: 300, // 300 pixels wide\n    height: '50%', // 50% of parent container's height\n};\n"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h2,{id:"minmax-constraints",children:"Min/Max Constraints"}),"\n",(0,t.jsxs)(i.p,{children:["The ",(0,t.jsx)(i.code,{children:"minWidth"}),", ",(0,t.jsx)(i.code,{children:"minHeight"}),", ",(0,t.jsx)(i.code,{children:"maxWidth"}),", and ",(0,t.jsx)(i.code,{children:"maxHeight"})," properties define strict boundaries for the node\u2019s size."]}),"\n",(0,t.jsxs)(i.admonition,{type:"info",children:[(0,t.jsx)(i.mdxAdmonitionTitle,{children:(0,t.jsx)(i.strong,{children:"Important:"})}),(0,t.jsxs)(i.p,{children:["Min and max constraints have ",(0,t.jsx)(i.strong,{children:"higher priority"})," than other sizing properties.",(0,t.jsx)(i.br,{}),"\n","No matter what flex rules or intrinsic content sizes are calculated, these constraints will always be respected."]})]}),"\n",(0,t.jsxs)(i.table,{children:[(0,t.jsx)(i.thead,{children:(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.th,{children:"Property"}),(0,t.jsx)(i.th,{children:"Description"})]})}),(0,t.jsxs)(i.tbody,{children:[(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"minWidth"})}),(0,t.jsx)(i.td,{children:"Minimum width the node can shrink to."})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"minHeight"})}),(0,t.jsx)(i.td,{children:"Minimum height the node can shrink to."})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"maxWidth"})}),(0,t.jsx)(i.td,{children:"Maximum width the node can expand to."})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"maxHeight"})}),(0,t.jsx)(i.td,{children:"Maximum height the node can expand to."})]})]})]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"sprite.layout = {\n    width: '100%',\n    minWidth: 200,\n    maxWidth: 500,\n};\n"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h2,{id:"aspect-ratio",children:"Aspect Ratio"}),"\n",(0,t.jsxs)(i.p,{children:["The ",(0,t.jsx)(i.code,{children:"aspectRatio"})," property defines as the ratio between the node\u2019s width and height."]}),"\n",(0,t.jsxs)(i.admonition,{type:"info",children:[(0,t.jsx)(i.mdxAdmonitionTitle,{children:(0,t.jsx)(i.strong,{children:"Important:"})}),(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["Has ",(0,t.jsx)(i.strong,{children:"higher priority"})," than flex grow/shrink calculations."]}),"\n",(0,t.jsx)(i.li,{children:"If both width and height are explicitly set, the aspect ratio will adjust the dimension along the cross axis to maintain the ratio unless min/max constraints block it."}),"\n",(0,t.jsx)(i.li,{children:"Respects min and max dimensions."}),"\n"]})]}),"\n",(0,t.jsxs)(i.table,{children:[(0,t.jsx)(i.thead,{children:(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.th,{children:"Property"}),(0,t.jsx)(i.th,{children:"Description"})]})}),(0,t.jsx)(i.tbody,{children:(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"aspectRatio"})}),(0,t.jsxs)(i.td,{children:["A positive floating-point number representing the ratio of width to height (e.g., ",(0,t.jsx)(i.code,{children:"1.5"})," for 3:2 ratio)."]})]})})]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"sprite.layout = {\n    width: 200,\n    aspectRatio: 1.5,\n};\n\nsprite.layout = {\n    height: 200,\n    aspectRatio: 2,\n};\n"})})]})}function a(e={}){const{wrapper:i}={...(0,d.R)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},3023:(e,i,n)=>{n.d(i,{R:()=>r,x:()=>o});var s=n(3696);const t={},d=s.createContext(t);function r(e){const i=s.useContext(d);return s.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function o(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),s.createElement(d.Provider,{value:i},e.children)}}}]);