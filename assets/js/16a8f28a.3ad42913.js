"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6328],{3023:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>r});var s=t(3696);const o={},i=s.createContext(o);function a(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),s.createElement(i.Provider,{value:n},e.children)}},8167:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"guides/core/concepts/containers-leaf-nodes","title":"Containers and Leaf Nodes","description":"Containers and Leaf Nodes","source":"@site/docs/guides/core/concepts/containers-leaf-nodes.md","sourceDirName":"guides/core/concepts","slug":"/guides/core/concepts/containers-leaf-nodes","permalink":"/docs/guides/core/concepts/containers-leaf-nodes","draft":false,"unlisted":false,"editUrl":"https://github.com/pixijs/layout/tree/main/website/docs/docs/guides/core/concepts/containers-leaf-nodes.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"title":"Containers and Leaf Nodes","hide_title":true,"sidebar_position":1},"sidebar":"guides","previous":{"title":"Flexbox Model","permalink":"/docs/guides/core/concepts/flexbox"},"next":{"title":"Layout Transforms","permalink":"/docs/guides/core/concepts/transform-origin"}}');var o=t(2540),i=t(3023);const a={title:"Containers and Leaf Nodes",hide_title:!0,sidebar_position:1},r=void 0,c={},d=[{value:"Containers and Leaf Nodes",id:"containers-and-leaf-nodes",level:2},{value:"Containers As Leaf Nodes",id:"containers-as-leaf-nodes",level:3}];function l(e){const n={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"containers-and-leaf-nodes",children:"Containers and Leaf Nodes"}),"\n",(0,o.jsx)(n.p,{children:"When layout is enabled on an object, it receives default styling based on its type.\nIn PixiJS you can generally think of it having two types of objects:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Containers"}),": Objects that can contain other objects, including other containers and leaf nodes."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Leaf Nodes"}),": Objects that ",(0,o.jsx)(n.strong,{children:"cannot"})," contain other objects,","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"Sprite"}),", ",(0,o.jsx)(n.code,{children:"Text"}),", ",(0,o.jsx)(n.code,{children:"Graphics"}),", and ",(0,o.jsx)(n.code,{children:"TilingSprite"})," are all examples of leaf nodes."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["For the web developers, this is similar to the difference between a ",(0,o.jsx)(n.code,{children:"<div>"})," and an ",(0,o.jsx)(n.code,{children:"<img>"})," tag.\nContainers can have children, while leaf nodes cannot."]}),"\n",(0,o.jsx)(n.p,{children:"There are two main differences between containers and leaf nodes:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Containers can have children, while leaf nodes cannot."}),"\n",(0,o.jsxs)(n.li,{children:["Leaf nodes can use ",(0,o.jsx)(n.code,{children:"objectFit"})," and ",(0,o.jsx)(n.code,{children:"objectPosition"})," properties to control how they are displayed within their layout box, while containers cannot."]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"The concept of leaf nodes is important to understand as it is referenced many times in the documentation."}),"\n",(0,o.jsx)(n.h3,{id:"containers-as-leaf-nodes",children:"Containers As Leaf Nodes"}),"\n",(0,o.jsxs)(n.p,{children:["In some cases, you may want a container to behave like a leaf node. For example, many libraries such as PixiJS UI use a ",(0,o.jsx)(n.code,{children:"Container"})," as a wrapper for holding multiple elements together."]}),"\n",(0,o.jsxs)(n.p,{children:["In this case, you can set the ",(0,o.jsx)(n.code,{children:"isLeaf"})," property to ",(0,o.jsx)(n.code,{children:"true"})," on the container. This will make it behave like a leaf node, ignoring its children for layout purposes."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"const container = new Container();\n\ncontainer.layout = {\n    isLeaf: true,\n    objectFit: 'contain',\n    objectPosition: 'center',\n};\n"})}),"\n",(0,o.jsxs)(n.p,{children:["When a container is set to ",(0,o.jsx)(n.code,{children:"isLeaf"}),", if the bounds of the container are negative, it will be pushed along to the origin (0,0) to ensure that the content doesn't leave the layout box."]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}}}]);