"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5163],{4236:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"guides/styles/overview","title":"Overview","description":"Styling in PixiJS Layout","source":"@site/docs/guides/styles/overview.md","sourceDirName":"guides/styles","slug":"/guides/styles/overview","permalink":"/docs/guides/styles/overview","draft":false,"unlisted":false,"editUrl":"https://github.com/pixijs/layout/tree/main/website/docs/docs/guides/styles/overview.md","tags":[],"version":"current","sidebarPosition":0,"frontMatter":{"title":"Overview","hide_title":true,"sidebar_position":0},"sidebar":"guides","previous":{"title":"Components","permalink":"/docs/guides/core/components"},"next":{"title":"Sizing and Dimensions","permalink":"/docs/guides/styles/sizing-and-dimensions"}}');var s=i(2540),o=i(3023);const r={title:"Overview",hide_title:!0,sidebar_position:0},l=void 0,a={},d=[{value:"Styling in PixiJS Layout",id:"styling-in-pixijs-layout",level:2},{value:"How Styling Works",id:"how-styling-works",level:2},{value:"Familiar Concepts for Web Developers",id:"familiar-concepts-for-web-developers",level:2},{value:"Containers and Leaf Nodes",id:"containers-and-leaf-nodes",level:2},{value:"Containers As Leaf Nodes",id:"containers-as-leaf-nodes",level:3},{value:"Applying and Updating Styles",id:"applying-and-updating-styles",level:2},{value:"Next Steps",id:"next-steps",level:2}];function c(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"styling-in-pixijs-layout",children:"Styling in PixiJS Layout"}),"\n",(0,s.jsx)(n.p,{children:"The PixiJS Layout library brings familiar CSS-like styling concepts to PixiJS applications.\nDevelopers can control sizing, positioning, spacing, flex behavior, and visuals using a declarative style object."}),"\n",(0,s.jsx)(n.p,{children:"This guide introduces the overall approach to styling in PixiJS Layout and prepares you for more detailed topics like sizing, flexbox, spacing, and overflow."}),"\n",(0,s.jsx)(n.h2,{id:"how-styling-works",children:"How Styling Works"}),"\n",(0,s.jsxs)(n.p,{children:["PixiJS Layout styles are applied using a simple JavaScript object.\nThese style objects are passed to display objects through the ",(0,s.jsx)(n.code,{children:"layout"})," property:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"sprite.layout = {\n    width: 100,\n    height: 100,\n    margin: 10,\n    objectFit: 'contain',\n};\n"})}),"\n",(0,s.jsx)(n.p,{children:"Styles can be:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Assigned at creation time through constructor options"}),"\n",(0,s.jsxs)(n.li,{children:["Updated later by setting the ",(0,s.jsx)(n.code,{children:"layout"})," property again."]}),"\n",(0,s.jsx)(n.li,{children:"You do not need to provide a full style object each time; you can update only the properties you want to change."}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const sprite = new Sprite({ texture, layout: true });\n// Set styles after creation\nsprite.layout = {\n    flexGrow: 1,\n    justifyContent: 'center',\n};\n"})}),"\n",(0,s.jsx)(n.p,{children:"Under the hood, PixiJS Layout uses a flexbox-based engine call Yoga to resolve sizing, positioning, and scaling, much like how HTML and CSS flex layouts behave."}),"\n",(0,s.jsx)(n.h2,{id:"familiar-concepts-for-web-developers",children:"Familiar Concepts for Web Developers"}),"\n",(0,s.jsx)(n.p,{children:"If you have experience with web development, many PixiJS Layout properties will feel familiar, with similar names and behaviors to CSS properties."}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"PixiJS Layout Style"}),(0,s.jsx)(n.th,{children:"Similar to CSS property"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"width, height"}),(0,s.jsx)(n.td,{children:"width, height"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"margin, padding"}),(0,s.jsx)(n.td,{children:"margin, padding"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"flexGrow, flexShrink"}),(0,s.jsx)(n.td,{children:"flex-grow, flex-shrink"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"justifyContent, alignItems"}),(0,s.jsx)(n.td,{children:"justify-content, align-items"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"overflow"}),(0,s.jsx)(n.td,{children:"overflow"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"backgroundColor, borderRadius"}),(0,s.jsx)(n.td,{children:"background-color, border-radius"})]})]})]}),"\n",(0,s.jsx)(n.p,{children:"You can see more details on the specific properties in the rest of this section."}),"\n",(0,s.jsx)(n.h2,{id:"containers-and-leaf-nodes",children:"Containers and Leaf Nodes"}),"\n",(0,s.jsx)(n.p,{children:"When layout is enabled on an object, it receives default styling based on its type.\nIn PixiJS you can generally think of two types of objects:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Containers"}),": These are objects that can contain other objects"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Leaf nodes"}),": These are objects that do not contain other objects, like ",(0,s.jsx)(n.code,{children:"Sprite"})," or ",(0,s.jsx)(n.code,{children:"Text"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["For the web developers, this is similar to the difference between a ",(0,s.jsx)(n.code,{children:"<div>"})," and an ",(0,s.jsx)(n.code,{children:"<img>"})," tag.\nContainers can have children, while leaf nodes cannot."]}),"\n",(0,s.jsxs)(n.p,{children:["One of the core differences between containers and leaf nodes is that leaf nodes are able to use ",(0,s.jsx)(n.code,{children:"objectFit"})," and ",(0,s.jsx)(n.code,{children:"objectPosition"})," properties to control how they are displayed within their layout box."]}),"\n",(0,s.jsx)(n.h3,{id:"containers-as-leaf-nodes",children:"Containers As Leaf Nodes"}),"\n",(0,s.jsx)(n.p,{children:"In some cases, you may want a container to behave like a leaf node. For example, many libraries such as PixiJS UI use a container as a wrapper for holding multiple elements together."}),"\n",(0,s.jsxs)(n.p,{children:["In this case, you can set the ",(0,s.jsx)(n.code,{children:"isLeaf"})," property to ",(0,s.jsx)(n.code,{children:"true"})," on the container. This will make it behave like a leaf node, ignoring its children for layout purposes."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const container = new Container();\n\ncontainer.layout = {\n    isLeaf: true,\n    width: 100,\n    height: 100,\n    objectFit: 'contain',\n    objectPosition: 'center',\n};\n"})}),"\n",(0,s.jsx)(n.h2,{id:"applying-and-updating-styles",children:"Applying and Updating Styles"}),"\n",(0,s.jsx)(n.p,{children:"When setting styles, PixiJS Layout will automatically trigger a layout recalculation:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"sprite.layout = {\n    width: 200,\n    height: 150,\n    objectFit: 'cover',\n};\n"})}),"\n",(0,s.jsx)(n.p,{children:"If you change properties that affect intrinsic sizes (like replacing a texture or changing text content), PixiJS Layout will detect this and update the layout during the next update pass."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Tip:"}),"\nUse ",(0,s.jsx)(n.code,{children:"forceUpdate()"})," if you manually trigger changes that PixiJS Layout might not detect automatically."]}),"\n",(0,s.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,s.jsx)(n.p,{children:"In the following guides, we will cover specific style areas in more depth:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/docs/guides/styles/sizing-and-dimensions",children:"Sizing and Dimensions"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/docs/guides/styles/flexbox-layout",children:"Flexbox Layout"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/docs/guides/styles/spacing-margins-padding",children:"Margins and Padding"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/docs/guides/styles/positioning",children:"Positioning"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/docs/guides/styles/overflow-and-scrolling",children:"Overflow and Scrolling"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/docs/guides/styles/object-fitting-alignment",children:"Object Fitting and Alignment"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/docs/guides/styles/background",children:"Background and Borders"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},3023:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>l});var t=i(3696);const s={},o=t.createContext(s);function r(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);