"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9017],{3023:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>r});var i=n(3696);const o={},s=i.createContext(o);function a(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),i.createElement(s.Provider,{value:t},e.children)}},6795:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"guides/core/concepts/opt-in-layout","title":"Opt-in Layout","description":"Opt-in Layout By Default","source":"@site/docs/guides/core/concepts/opt-in-layout.md","sourceDirName":"guides/core/concepts","slug":"/guides/core/concepts/opt-in-layout","permalink":"/docs/guides/core/concepts/opt-in-layout","draft":false,"unlisted":false,"editUrl":"https://github.com/pixijs/layout/tree/main/website/docs/docs/guides/core/concepts/opt-in-layout.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"title":"Opt-in Layout","hide_title":true,"sidebar_position":3},"sidebar":"guides","previous":{"title":"Layout Transforms","permalink":"/docs/guides/core/concepts/transform-origin"},"next":{"title":"Overview","permalink":"/docs/guides/core/overview"}}');var o=n(2540),s=n(3023);const a={title:"Opt-in Layout",hide_title:!0,sidebar_position:3},r=void 0,l={},c=[{value:"Opt-in Layout By Default",id:"opt-in-layout-by-default",level:2}];function d(e){const t={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h2,{id:"opt-in-layout-by-default",children:"Opt-in Layout By Default"}),"\n",(0,o.jsxs)(t.p,{children:["One of the defining strengths of PixiJS Layout is its ",(0,o.jsx)(t.strong,{children:"non-invasive"}),", ",(0,o.jsx)(t.strong,{children:"opt-in"})," design. Layout logic is only applied when explicitly requested. This enables seamless integration into existing PixiJS projects and flexibility:"]}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:["A parent will only apply layout to children that ",(0,o.jsx)(t.strong,{children:"have layout enabled"})," (",(0,o.jsx)(t.code,{children:"layout"})," property)."]}),"\n",(0,o.jsxs)(t.li,{children:["Children without layout are ",(0,o.jsx)(t.strong,{children:"unaffected"})," and behave just like standard PixiJS objects."]}),"\n",(0,o.jsx)(t.li,{children:"This makes the system safe by default and easy to adopt incrementally."}),"\n"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ts",children:"const container = new Container({\n    layout: {\n        width: 500,\n        height: 500,\n        justifyContent: 'center',\n    },\n});\n\nconst managed = new Sprite({ texture, layout: true });\nconst unmanaged = new Sprite(texture); // not in layout\n\ncontainer.addChild(managed, unmanaged);\n"})}),"\n",(0,o.jsx)(t.p,{children:"In this case:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"managed"})," will be centered in the layout box (positioned at 250,250)."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"unmanaged"})," will be placed at 0,0, unless you set its .x and .y manually."]}),"\n"]})]})}function u(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);